[
  {
    "id": "fb12f206.1ba3b",
    "type": "switch",
    "z": "d3396a61.a88b48",
    "name": "Switch on Action",
    "property": "payload.result.action",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "input.welcome",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "updateWinkDevices",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "detectPresence",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "userDefined",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "winkStatus",
        "vt": "str"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "outputs": 6,
    "x": 520.9410095214844,
    "y": 391.06614685058594,
    "wires": [
      [
        "242ec7b0.e0d228"
      ],
      [
        "242ec7b0.e0d228",
        "2c9a3b8a.19ca04"
      ],
      [
        "282b02c6.c8aa9e"
      ],
      [
        "d825f87a.5ad6b8"
      ],
      [
        "9b18cbef.5efd18"
      ],
      [
        "2c9a3b8a.19ca04"
      ]
    ]
  },
  {
    "id": "fa2a4de5.4b484",
    "type": "comment",
    "z": "d3396a61.a88b48",
    "name": "Webhook-API.AI ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 690,
    "y": 80,
    "wires": []
  },
  {
    "id": "629136ea.111068",
    "type": "http in",
    "z": "d3396a61.a88b48",
    "name": "",
    "url": "/red/googleActions",
    "method": "post",
    "swaggerDoc": "",
    "x": 96.10421752929688,
    "y": 396.2221984863281,
    "wires": [
      [
        "a442c447.e7e518",
        "749fff42.69fea"
      ]
    ]
  },
  {
    "id": "c6b59bb4.088ef8",
    "type": "http response",
    "z": "d3396a61.a88b48",
    "name": "Response to API.AI",
    "x": 1228.0136413574219,
    "y": 323.1315002441406,
    "wires": []
  },
  {
    "id": "2c9a3b8a.19ca04",
    "type": "function",
    "z": "d3396a61.a88b48",
    "name": "Process Request",
    "func": "var WinkCMDmsg = \"\";\nvar WinkCMDmsg2 = \"\";\nvar localMsg = \"\";\nvar speechVar = \"unknown\";\nvar displayVar = \"not available at this time\";\nvar result = msg.payload.result;\nvar action = result.action;\n//var action = inputs.intent;\nvar parameters = result.parameters;\nvar cmd = parameters.command;\nvar winkName = parameters.winkName;\nvar winkRobot = parameters.winkRobot;\nvar robotCmd = parameters.robotCmd;\nvar globVarName = parameters.globVarName;\nvar temperature = parameters.temperature;\nvar mode = parameters.mode;\nvar type = \"\";\nvar level = parameters.level;\nvar winkData = context.global.winkState;\nvar eid;\nvar new_entries;\n\n//for honey Lyric thermostats\n//var thermName = context.global.honeywellLyricName;\n//var mode = context.global.winkState.thermostats[thermName].mode;\n//var setPoint= (mode === 'Cool' ? context.global.winkState.thermostats[thermName].cool_set_point : context.global.winkState.thermostats[thermName].heat_set_point);\n\nvar welcome = [\n        \"Hi, can I help you today?\",\n        \"Hello, something I can help you with?\",\n        \"Greetings!, can i be of some help today?\",\n        \"Good Day!, what can i help you with?\",\n        \"How can I help you today?\",\n        \"Is there something I can help you with?\"\n    ];\n\nvar WNRcmd = [\n        \"The command \" +winkName + \" \" + cmd + \" has been executed\",\n        winkName + \" \" + cmd + \" processed\",\n        winkName +\" is now \" +cmd\n    ];\n    \nvar VARcmd = [\n        \"The command \" +globVarName + \" \" + cmd + \" has been executed\",\n        globVarName + \" \" + cmd + \" processed\",\n        globVarName +\" is now \" +cmd\n    ];\n\n//return an array of objects according to key matching\nfunction getTypeByName(obj, query) {\n    for (var key in obj) {\n        var value = obj[key];\n        for(var winkname in value){\n            if (winkname == query) {\n                //node.warn('type=' + key);\n                return (key);\n            }\n        }\n    }\n}\n\nfunction getWinkDevices(obj){\n    var array = [];\n        for (var device in obj){\n            var name=obj[device];\n            var str = JSON.stringify(name.name);\n            if ( !(str.includes(\"@\",0)) && !(str.includes(\".\",0)) )\n                array.push({\"value\":name.name});\n        }\n    return array;\n}\n\nvar web_req=false;\nif (msg.req.headers['authorization']==context.global.googleHomeKey) web_req=true;\nif (web_req){\n    \n    switch(action)\n    {\n        case \"WNRcmd\":\n            if(cmd == \"status\"){\n                speechVar = \"not support yet\";\n                break;\n            }\n            \n            type = getTypeByName(winkData,parameters.winkName);\n            node.warn(type);\n            switch(type)\n            {\n                case \"binary_switches\":\n                case \"light_bulbs\":\n                    type = \"light\";\n                    break;\n                case \"groups\":\n                    type = \"group\";\n                    break;  \n                case \"scenes\":\n                    type = \"shortcut\";\n                    break;\n                default:\n                    type = \"undefined\";\n                break;\n            }\n            \n            if (type === \"undefined\"){\n                speechVar = parameters.winkName +\" is not a defined Device in your list\";\n            }\n            else{\n                if (level === \"\"){               \n                    level = 100;\n                    speechVar = WNRcmd[Math.floor((Math.random() * WNRcmd.length) + 0)];\n                }\n                else{\n                    cmd = \"on\";\n                    speechVar = WNRcmd[Math.floor((Math.random() * WNRcmd.length) + 0)];\n                    speechVar = speechVar + \" at brightness of \" +level;\n                }\n                WinkCMDmsg = context.global.executeWinkCMD(parameters.winkName,type,cmd,level);\n            }\n            break;\n            \n        case \"sendVarCmd\":\n            \n            global.set(globVarName,cmd);\n\n            //node.warn(globVarName + \" turned \" + cmd);\n            speechVar = VARcmd[Math.floor((Math.random() * VARcmd.length) + 0)];\n            WinkCMDmsg=context.global.send_ui_note('information',30000,'Variable '+globVarName+' set to: '+cmd,null);\n            WinkCMDmsg.topic=globVarName;\n            WinkCMDmsg.var_val=cmd;   \n            break;\n        \n        case \"globalVarState\":\n            \n            if(context.global.hasOwnProperty(globVarName)){\n                speechVar = globVarName + \" is \" +context.global[globVarName];\n            }\n            else{\n                speechVar = globVarName + \" is not global variable\";\n            }\n            break;\n            \n        case \"updateWinkDevices\":\n            eid = getWinkDevices(context.global.winkState.light_bulbs);\n            eid = eid.concat(getWinkDevices(context.global.winkState.binary_switches));\n            eid = eid.concat(getWinkDevices(context.global.winkState.groups));\n            //what other devices need to be added here?\n            \n            //Find values that are in context.global.googleHomeWinkDevices but not in eid\n            new_entries = eid.filter(function(obj) {\n                return !context.global.googleHomeWinkDevices.some(function(obj2) {\n                    return obj.value == obj2.value;\n                });\n            });\n            speechVar = new_entries.length +\" new devices were retrieved,  Is there anything else I can do for you?\";\n            WinkCMDmsg ={\n                \"url\":\"https://api.api.ai/v1/entities/winkName/entries?v=20150910\",\n                \"method\": \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\":\"Bearer \"+context.global.googleHomeKey\n                },\n                payload: \n                    new_entries\n            };\n            break;\n\n        case \"input.welcome\":\n        case \"assistant.intent.action.MAIN\":\n            speechVar = welcome[Math.floor((Math.random() * welcome.length) + 1)];\n            break;\n\n        case \"goodNight\":\n            //your code that will handle goodNight action\n            speechVar = \"Nighty night don't let the bed bugs bite\";\n            break;\n            \n        case \"comfortZone\":  //This intent is not in the sample API.AI code\n            speechVar = \"This action is used for testing\";\n            break;\n\n/* This code will only work if you have a honey lyric termostat (it could be modified to work with other brands          \n        case \"comfortZone.queryTemp\":\n            speechVar = thermName+\" current temperature is \" \n                            +context.global.winkState.thermostats[thermName].temperature +\" degrees  With a Setpoint of\" +setPoint;\n            break;\n            \n        case \"comfortZone.queryTherm\":\n            speechVar = thermName+\" current status is: \" \n                            +\"\\nTemperature: \" +context.global.winkState.thermostats[thermName].temperature +\" degrees\"\n                            +\"\\nMode: \" +mode\n                            +\"\\nFan Mode: \" +context.global.winkState.thermostats[thermName].fan_mode\n                            +\"\\nSetpoint: \" +setPoint\n                            +\"\\nOp Stat: \" +context.global.winkState.thermostats[thermName].powered;\n            node.send(context.global.sendViaPushBullet('note','Thermostat Status',speechVar,''));\n            break;\n            \n        case \"comfortZone.temp\":\n            //WinkCMDmsg = context.global.executeLyricTstatCMD(thermName,\"temperature\",temperature);\n            speechVar = \"Temperature is being set to \"+temperature;\n            break;\n        \n        case \"comfortZone.adjustTemp\":\n            var numb = parseInt(parameters.number);\n            if(parameters.adjust === \"decrease\"  || parameters.adjust === \"down\" || parameters.adjust === \"lower\"){\n                numb = -Math.abs( numb );    \n            }\n            WinkCMDmsg = context.global.executeLyricTstatCMD(thermName,\"adjust\",numb);\n            speechVar = \"Temperature \" +parameters.adjust +\"d by \"+parameters.number +\" degrees.  Setpoint now is\" +(setPoint + numb);\n            break;\n            \n        case \"comfortZone.mode\":\n            WinkCMDmsg = context.global.executeLyricTstatCMD(thermName,\"mode\",mode);\n            speechVar = \"HVAC system is being set to \"+mode;\n            break;\n            \n        case \"comfortZone.fan\":\n            WinkCMDmsg = (context.global.executeLyricTstatCMD(thermName,\"fan\",mode));\n            speechVar = \"HVAC fan is being set to \"+mode;\n            break;\nend thermostat actions */\n\n        default:\n            speechVar = \"Unknown action\";\n            break;\n    }//end switch(action)\n}\n//web request denided\nelse {\n    node.warn(\"Google Home messages bad request\");\n    msg.statusCode=403;\n    return [msg,null];\n}\n\n//message returned to api.ai\n//this always needs to be returned\nmsg.headers = {\n        \"Content-type\" : \"application/json\",\n        \"my-custom-header\": \"a value\"\n    };\nmsg.statusCode=200; \nmsg.payload= {\n    \"speech\": speechVar,\n    \"displayText\": speechVar,  //this could be different then speech it is want is displayed on google assistant screens\n    \"data\": {\"WNR\": action},\n    \"contextOut\": [],\n    \"source\": \"WinkNodeRed\"\n    };\n\n\nif (WinkCMDmsg!==\"\")\n{\n    return [WinkCMDmsg,msg];\n}\n\nelse\n{\n    return [null,msg];\n}",
    "outputs": "2",
    "noerr": 0,
    "x": 777.104248046875,
    "y": 487.22216796875,
    "wires": [
      [
        "461e8ec7.01465"
      ],
      [
        "eae967f9.f909a8",
        "616b3de3.8f6724"
      ]
    ],
    "outputLabels": [
      "wink cmd msg",
      "api.ai responce msg"
    ]
  },
  {
    "id": "c95506c9.e78c18",
    "type": "http request",
    "z": "d3396a61.a88b48",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "tls": "",
    "x": 1315.104393005371,
    "y": 453.2222270965576,
    "wires": [
      []
    ]
  },
  {
    "id": "bf4319ba.6b3e68",
    "type": "delay",
    "z": "d3396a61.a88b48",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 1155.1044540405273,
    "y": 453.22221279144287,
    "wires": [
      [
        "c95506c9.e78c18"
      ]
    ]
  },
  {
    "id": "242ec7b0.e0d228",
    "type": "function",
    "z": "d3396a61.a88b48",
    "name": "",
    "func": "var msg ={\n    \"url\":\"https://api.api.ai/v1/entities/winkName\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.googleHomeKey,\n        }\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 591.8368835449219,
    "y": 248.61113739013672,
    "wires": [
      [
        "5424dc21.779b84",
        "7274e1d6.f8331"
      ]
    ]
  },
  {
    "id": "5424dc21.779b84",
    "type": "http request",
    "z": "d3396a61.a88b48",
    "name": "Google Home wink_devices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "tls": "",
    "x": 784.8959350585938,
    "y": 248.33330535888672,
    "wires": [
      [
        "59f15c6f.e34b54"
      ]
    ]
  },
  {
    "id": "59f15c6f.e34b54",
    "type": "function",
    "z": "d3396a61.a88b48",
    "name": "googleHomeWinkDevices",
    "func": "function getEntries(obj,search){\n    for (var i in obj){\n        var entries=obj[i];\n        if (i == search){\n            return(entries);\n        }\n    }\n}\n\ncontext.global.googleHomeWinkDevices = getEntries(msg.payload,\"entries\");\n//node.warn(context.global.googleHomeWinkDevices);\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 1043.8959350585938,
    "y": 248.33330535888672,
    "wires": [
      [
        "becb2441.6021c8"
      ]
    ]
  },
  {
    "id": "b513059c.303c48",
    "type": "inject",
    "z": "d3396a61.a88b48",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "43200",
    "crontab": "",
    "once": true,
    "x": 415.84033203125,
    "y": 247.68755340576172,
    "wires": [
      [
        "242ec7b0.e0d228"
      ]
    ]
  },
  {
    "id": "becb2441.6021c8",
    "type": "debug",
    "z": "d3396a61.a88b48",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 1245.8960571289062,
    "y": 248.66680145263672,
    "wires": []
  },
  {
    "id": "5f6f0258.94544c",
    "type": "inject",
    "z": "d3396a61.a88b48",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": true,
    "x": 182.93423461914062,
    "y": 152.35763549804688,
    "wires": [
      [
        "5fc01b84.1290b4"
      ]
    ]
  },
  {
    "id": "5fc01b84.1290b4",
    "type": "function",
    "z": "d3396a61.a88b48",
    "name": "Define Globals",
    "func": "\ncontext.global.googleHomeKey=\"156fd7aca30d4540b5c85386b95fb916\";  // winknodered\n\nif (typeof context.global.goodNight === 'undefined')\n{\n    context.global.goodNight=false;\n}\n\nif (typeof(context.global.googleHomeWinkDevices) === 'undefined')\n{\n    context.global.googleHomeWinkDevices = [];  \n}\n\nif (typeof(context.global.googleHomeGlbVariables) === 'undefined')\n{\n    context.global.googleHomeGlbVariables = [];  \n}",
    "outputs": 1,
    "noerr": 0,
    "x": 370.3013610839844,
    "y": 152.8235626220703,
    "wires": [
      []
    ]
  },
  {
    "id": "63bc66bf.17c2d8",
    "type": "comment",
    "z": "d3396a61.a88b48",
    "name": "request API.AI for wink_devices entity",
    "info": "",
    "x": 957.1633605957031,
    "y": 206.94442749023438,
    "wires": []
  },
  {
    "id": "461e8ec7.01465",
    "type": "function",
    "z": "d3396a61.a88b48",
    "name": "",
    "func": "var t=msg.topic;\nnode.send(msg);\nif ('topic' in msg){\n    var wsMsg={};\n    wsMsg.payload={\n        varName:t,\n        varVal:context.global[t]\n    }\n    wsMsg.method=\"POST\";\n    wsMsg.url=context.global.BlueMixUrlBase+'/red/wscomms';\n    wsMsg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    };    \n    node.send(wsMsg);\n    \n    if (t=='VacationMode' && context.global.VacationMode=='on'){\n        var Msg1={}\n        Msg1.method=\"POST\";\n        Msg1.url=context.global.BlueMixUrlBase+'/red/vacation_init';\n        Msg1.headers= {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        };\n        context.global.sendWithTimeout(node,Msg1,4000);\n    }\n    if (t=='VacationMode' && context.global.VacationMode=='off') context.global.clearAllIntervals();\n\n} \nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1017.6667633056641,
    "y": 453.2465161085129,
    "wires": [
      [
        "bf4319ba.6b3e68"
      ]
    ]
  },
  {
    "id": "a442c447.e7e518",
    "type": "debug",
    "z": "d3396a61.a88b48",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "true",
    "x": 286.1042175292969,
    "y": 359,
    "wires": []
  },
  {
    "id": "7274e1d6.f8331",
    "type": "debug",
    "z": "d3396a61.a88b48",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "true",
    "x": 683.1042175292969,
    "y": 206,
    "wires": []
  },
  {
    "id": "749fff42.69fea",
    "type": "function",
    "z": "d3396a61.a88b48",
    "name": "Verify Request",
    "func": "if (msg.req.headers['authorization']==context.global.googleHomeKey){\n    return [msg,null];\n}\nelse {\n    node.warn(\"Google Home messages bad request\");\n    msg.headers = {\n        \"Content-type\" : \"application/json\",\n        \"my-custom-header\": \"a value\"\n    };\n    msg.statusCode=206;\n    msg.payload= {\n    \"speech\": \"Bad Request\",\n    \"displayText\": \"Bad Request\",\n    \"data\": {\"WNR\": msg.payload.result.action},\n    \"contextOut\": [],\n    \"source\": \"WinkNodeRed\"\n    };\n    return [null,msg];\n}",
    "outputs": "2",
    "noerr": 0,
    "x": 317.1042175292969,
    "y": 397,
    "wires": [
      [
        "fb12f206.1ba3b"
      ],
      [
        "13b64fb3.7383b"
      ]
    ]
  },
  {
    "id": "eae967f9.f909a8",
    "type": "debug",
    "z": "d3396a61.a88b48",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 1060.104232788086,
    "y": 492.9999951124191,
    "wires": []
  },
  {
    "id": "9edbfe4d.aeefc",
    "type": "link in",
    "z": "d3396a61.a88b48",
    "name": "Responce",
    "links": [
      "13b64fb3.7383b",
      "79936d69.fd4f74",
      "616b3de3.8f6724",
      "8493ad0.8c7fd5",
      "d2c58e74.3582b",
      "c25311a1.74407"
    ],
    "x": 1095.1040954589844,
    "y": 323,
    "wires": [
      [
        "c6b59bb4.088ef8"
      ]
    ]
  },
  {
    "id": "13b64fb3.7383b",
    "type": "link out",
    "z": "d3396a61.a88b48",
    "name": "Bad Request",
    "links": [
      "9edbfe4d.aeefc"
    ],
    "x": 451.1042175292969,
    "y": 461,
    "wires": []
  },
  {
    "id": "dd34fdcb.150df",
    "type": "comment",
    "z": "d3396a61.a88b48",
    "name": "Send Wink CMD message",
    "info": "",
    "x": 1113.1042022705078,
    "y": 414.9999951124191,
    "wires": []
  },
  {
    "id": "282b02c6.c8aa9e",
    "type": "function",
    "z": "d3396a61.a88b48",
    "name": "Report Presence",
    "func": "varSpeech = \"\";\nvarText   = \"\";\n\n\nvar obj = context.global.Presence;\nvar keys = Object.keys(obj);\nvar presence = keys.filter(function(key) {\n    return obj[key]\n});\n\nnode.warn(presence)\n\nswitch (presence.length){\n    case 0:\n        varText = \"No boby is Home\";\n        varSpeech = \"There isn't anyone home at this time\";\n        break;\n    case 1:\n        varSpeech = \"There is \" +presence.length + \" person home\";\n        varText = presence +\" is Home\";\n        break;\n    default:\n        varSpeech = \"There are \" +presence.length + \" people in the house\";\n        varText = presence +\" are Home\";\n    break;\n    \n    \n}\n\nmsg.headers = {\n    \"Content-type\" : \"application/json\",\n    \"my-custom-header\": \"a value\"\n};\nmsg.statusCode=200;\nmsg.payload= {\n    \"speech\": varSpeech,\n    \"displayText\": varText,\n    \"data\": {\"WNR\": msg.payload.result.action},\n    \"contextOut\": [],\n    \"source\": \"WinkNodeRed\"\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 777.104248046875,
    "y": 353,
    "wires": [
      [
        "79936d69.fd4f74"
      ]
    ]
  },
  {
    "id": "79936d69.fd4f74",
    "type": "link out",
    "z": "d3396a61.a88b48",
    "name": "Report Presence",
    "links": [
      "9edbfe4d.aeefc"
    ],
    "x": 912.104248046875,
    "y": 353,
    "wires": []
  },
  {
    "id": "616b3de3.8f6724",
    "type": "link out",
    "z": "d3396a61.a88b48",
    "name": "Process Request",
    "links": [
      "9edbfe4d.aeefc"
    ],
    "x": 944.1042327880859,
    "y": 493.9999951124191,
    "wires": []
  },
  {
    "id": "9b18cbef.5efd18",
    "type": "function",
    "z": "d3396a61.a88b48",
    "name": "Wink Status",
    "func": "var lights=context.global.winkState.groups['@lights'].powered.true_count+ \" lights on \";\nnode.warn(lights);\nvar varSpeech = \"Wink reports that there are \" +lights;\n\nmsg.statusCode=200;\nmsg.payload= {\n    \"speech\": varSpeech,\n    \"displayText\": varSpeech,\n    \"data\": {\"WNR\": msg.payload.result.action},\n    \"contextOut\": [],\n    \"source\": \"WinkNodeRed\"\n};\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 758.104248046875,
    "y": 441,
    "wires": [
      [
        "d2c58e74.3582b"
      ]
    ]
  },
  {
    "id": "d2c58e74.3582b",
    "type": "link out",
    "z": "d3396a61.a88b48",
    "name": "winkStatus",
    "links": [
      "9edbfe4d.aeefc"
    ],
    "x": 872.104248046875,
    "y": 441,
    "wires": []
  },
  {
    "id": "d825f87a.5ad6b8",
    "type": "function",
    "z": "d3396a61.a88b48",
    "name": "User defined",
    "func": "\nvar varSpeech = \"Not supported yet\";\n\nmsg.statusCode=200;\nmsg.payload= {\n    \"speech\": varSpeech,\n    \"displayText\": varSpeech,\n    \"data\": {\"WNR\": msg.payload.result.action},\n    \"contextOut\": [],\n    \"source\": \"WinkNodeRed\"\n};\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 757,
    "y": 398,
    "wires": [
      [
        "c25311a1.74407"
      ]
    ]
  },
  {
    "id": "c25311a1.74407",
    "type": "link out",
    "z": "d3396a61.a88b48",
    "name": "winkStatus",
    "links": [
      "9edbfe4d.aeefc"
    ],
    "x": 875,
    "y": 398,
    "wires": []
  }
]